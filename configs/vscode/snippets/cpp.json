{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Make header guards from file base name": {
		"prefix": "headerGuardBase",
		"body": [
			"#ifndef H${TM_FILENAME_BASE/([A-Z])([a-z]*)/_$1${2:/upcase}/g}_H",
			"#define H${TM_FILENAME_BASE/([A-Z])([a-z]*)/_$1${2:/upcase}/g}_H",
			"",
			"namespace ${1:Marvin}",
			"{",
			"",
			"} // namespace ${1:Marvin}",
			"",
			"#endif // H${TM_FILENAME_BASE/([A-Z])([a-z]*)/_$1${2:/upcase}/g}_H",
			"",
		]
	},

	"Make header guards from file base name and current time": {
		"prefix": "headerGuardBaseTime",
		"body": [
			"#ifndef H${TM_FILENAME_BASE/([A-Z])([a-z]*)/_$1${2:/upcase}/g}_${CURRENT_YEAR}_${CURRENT_MONTH_NAME/(.*)/${1:/upcase}/g}_${CURRENT_DATE}_${CURRENT_HOUR}_${CURRENT_MINUTE}_${CURRENT_SECOND}_H",
			"#define H${TM_FILENAME_BASE/([A-Z])([a-z]*)/_$1${2:/upcase}/g}_${CURRENT_YEAR}_${CURRENT_MONTH_NAME/(.*)/${1:/upcase}/g}_${CURRENT_DATE}_${CURRENT_HOUR}_${CURRENT_MINUTE}_${CURRENT_SECOND}_H",
			"",
			"namespace ${1:Marvin}",
			"{",
			"",
			"} // namespace ${1:Marvin}",
			"",
			"#endif // H${TM_FILENAME_BASE/([A-Z])([a-z]*)/_$1${2:/upcase}/g}_${CURRENT_YEAR}_${CURRENT_MONTH_NAME/(.*)/${1:/upcase}/g}_${CURRENT_DATE}_${CURRENT_HOUR}_${CURRENT_MINUTE}_${CURRENT_SECOND}_H",
			"",
		]
	},

	"Make header guards from relative path and file base name": {
		"prefix": "headerGuardRelativeBase",
		"body": [
			"#ifndef H_${RELATIVE_FILEPATH/(^[a-z]+)|(\\/*)([A-Z][a-z]*)|([A-Z][a-z]*)|(\\.)(.*)/${1:/upcase}${3:/upcase}${5:?H:_}/g}",
			"#define H_${RELATIVE_FILEPATH/(^[a-z]+)|(\\/*)([A-Z][a-z]*)|([A-Z][a-z]*)|(\\.)(.*)/${1:/upcase}${3:/upcase}${5:?H:_}/g}",
			"",
			"namespace ${1:Marvin}",
			"{",
			"",
			"} // namespace ${1:Marvin}",
			"",
			"#endif // H_${RELATIVE_FILEPATH/(^[a-z]+)|(\\/*)([A-Z][a-z]*)|([A-Z][a-z]*)|(\\.)(.*)/${1:/upcase}${3:/upcase}${5:?H:_}/g}",
			"",
		]
	},

	"Class using rule of 0": {
	"prefix": "cls0",
		"body": [
			"class ${1:$TM_FILENAME_BASE}",
			"{",
			"  private:",
			"",
			"  public:",
			"};",
			"",
		]
	},

	"Class using rule of 3": {
	"prefix": "cls3",
		"body": [
			"class ${1:$TM_FILENAME_BASE}",
			"{",
			"  private:",
			"",
			"  public:",
			"    explicit ${1:TM_FILENAME_BASE}() = default;",
			"",
			"    ~${1:TM_FILENAME_BASE}() = default;",
			"",
			"    explicit ${1:TM_FILENAME_BASE}(const ${1:TM_FILENAME_BASE}& other) = default;",
			"    ${1:TM_FILENAME_BASE}& operator=(const ${1:TM_FILENAME_BASE}& other) = default;",
			"};",
			"",
		]
	},

	"Class using rule of 5": {
		"prefix": "cls5",
		"body": [
			"class ${1:$TM_FILENAME_BASE}",
			"{",
			"  private:",
			"",
			"  public:",
			"    explicit ${1:TM_FILENAME_BASE}() = default;",
			"",
			"    ~${1:TM_FILENAME_BASE}() = default;",
			"",
			"    explicit ${1:TM_FILENAME_BASE}(const ${1:TM_FILENAME_BASE}& other) = default;",
			"    ${1:TM_FILENAME_BASE}& operator=(const ${1:TM_FILENAME_BASE}& other) = default;",
			"",
			"    explicit ${1:TM_FILENAME_BASE}(${1:TM_FILENAME_BASE}&& other) = default;",
			"    ${1:TM_FILENAME_BASE}& operator=(${1:TM_FILENAME_BASE}&& other) = default;",
			"};",
			"",
		]
	},

	"Class as interface": {
	"prefix": "clsi",
		"body": [
			"class ${1:$TM_FILENAME_BASE}",
			"{",
			"  public:",
			"    virtual ~${1:TM_FILENAME_BASE}() = default;",
			"",
			"    virtual ${2:void} ${3:execute}() const = 0;",
			"};",
			"",
		]
	},


}
