#lang sicp

(define (square x) (* x x))

(define (is_divisible a b)
  (= (remainder b a) 0))

(define (find_divisor n value)
  (cond ((> (square value) n) n)
        ((is_divisible value n) value)
        (else (find_divisor n (inc value)))))

(define (smallest_divisor n)
  (find_divisor n 2))

(define (prime? n)
  (= n (smallest_divisor n)))

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))


(define (flatmap proc seq)
  (accumulate append nil (map proc seq)))

(define (prime-sum? pair)
  (prime? (+ (car pair) (cadr pair))))

(define (enumerate-interval low high)
  (if (> low high)
      nil
      (cons low (enumerate-interval (+ low 1) high))))

(define (make-pair-sum pair)
  (let ((a (car pair))
        (b (cadr pair)))
    (list a b (+ a b))))
    
(define (filter pred items)
  (if (null? items)
      nil
      (if (pred (car items))
          (cons (car items) (filter pred (cdr items)))
          (filter pred (cdr items)))))

(define (prime-sum-pairs n)
  (map make-pair-sum
       (filter prime-sum? (flatmap
                           (lambda (i)
                             (map (lambda (j) (list i j))
                                  (enumerate-interval 1 (- i 1))))
                           (enumerate-interval 1 n)))))

(define (permutations items)
  (if (null? items)
      (list nil)
      (flatmap (lambda (x)
                 (map (lambda (p) (cons x p))
                      (permutations (remove x items))))
               items)))

(define (remove x items)
  (filter (lambda (y) (not (= y x))) items))

;(prime-sum-pairs 8)
;(permutations (list 1 2 3))













