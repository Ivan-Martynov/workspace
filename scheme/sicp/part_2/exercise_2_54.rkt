#lang sicp

(define (equal-generic? x y)
  (cond ((null? x) (null? y))
        ((null? y) (null? x))
        ((and (pair? x) (pair? y))
         (and (equal-generic? (car x) (car y))
              (equal-generic? (cdr x) (cdr y))))
        ((or (pair? x) (pair? y)) false)
        (else (eq? x y))))

(equal-generic? '(this is a list) '(this is a list))
(equal-generic? '(this is a list) '(this (is a) list))
(equal-generic? (list 1 2 3) (list 1 2))
(equal-generic? (list 1 2 3) 3)
(equal-generic? 3 (list 1 2 3))
(equal-generic? 3 '())
(equal-generic? (list 2) '())
(equal-generic? '() (list 2))
(equal-generic? '() 4)
(equal-generic? '() '())
(define set1 (list (list 4 5 6) (list 1 2) (list 1 2 3)))
(eq? (car set1) (car set1))
(equal-generic? (list (list 4 5 6) (list 1 2) (list 1 2 3))
             (list (list 4 5 6) (list 1 2) (list 1 2 3)))
(eq? set1 set1)
